@model VAS_CRP.ViewModel.OnSDPSvcs

@{
    ViewBag.Title = "OnSDPSvc";
}

<div class="container">
    <div class="row">
        <div class="col-md-offset-4 col-md-4 col-md-offset-4">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h3 class="box-title ">OnSDP Services</h3>
                </div>
                <!-- /.box-header -->
                <!-- form start -->

                @using (Ajax.BeginForm("SplSvcDet", "OnSDPSvcRpt", "", new AjaxOptions
                {
                    HttpMethod = "POST",
                    InsertionMode = InsertionMode.Replace,
                    LoadingElementId = "divloading",
                    UpdateTargetId = "ReportPart",
                    OnBegin = "ClearStatusMessage",
                    OnSuccess = "ConfirmationMessage",
                    OnFailure = "FailureMessage"
                }))
                {
                    @Html.AntiForgeryToken()

                    <div class="box-body">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-group">
                            <div class="col-lg-6">
                                @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.DropDownListFor(model => model.Country, Model.CountryList, "Select Country", new { @class = "form-control", @id = "Country" })
                                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-lg-6">
                                @Html.LabelFor(model => model.Operator, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.DropDownListFor(model => model.Operator, new List<SelectListItem>(), "Select Operator", new { @class = "form-control", @id = "Operator" })
                                @Html.ValidationMessageFor(model => model.Operator, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        <div class="form-group col-lg-offset-2 col-lg-8 col-lg-offset-2">
                            @Html.LabelFor(model => model.ReportType, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.DropDownListFor(model => model.ReportType, new List<SelectListItem>() { new SelectListItem { Text = "Service Details", Value = "Service Details" }, new SelectListItem { Text = "Subscriber Details", Value = "Subscriber Details" } }, "Select ReportType", new { @class = "form-control", @id = "ReportType" })
                            @Html.ValidationMessageFor(model => model.ReportType, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <div class="col-lg-6">
                                @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.FromDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-lg-6">
                                @Html.LabelFor(model => model.ToDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.ToDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                        <div class="box-footer">
                            <input type="submit" value="Display" class="btn btn-primary col-lg-offset-5" />
                        </div>

                }

            </div>
        </div>
    </div>
</div>

<hr />

<div id="ReportPart">
</div>

<div class="container">
    <div class="row">
        <div class="col-md-offset-5 col-md-2 col-md-offset-5">
            <div id="divloading" style="display:none;align-content:center">
                <img src="~/Content/Images/Loadinggif.gif" />
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    function ConfirmationMessage() {
        ej.widget.init($("#ReportPart"));
    }
    function FailureMessage() {
        $('#ReportPart').html("<div class='alert alert-danger alert-dismissable'><button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;</button><h4 class='text-center'>Some issue has occured, Unable to fetch details temporarily</h4></div>");
    }
    function ClearStatusMessage() {
        $('#ReportPart').empty();
    }

    $(document).ready(function () {
        $('#Country').change(function () {
            $.ajax({
                type: "post",
                url: '@Url.Action("GetOperatorList")',
                data: { Country: $('#Country').val() },
                datatype: "json",
                success: function (Operators) {
                    $('#Operator').empty();
                    $("#Operator").append('<option value="">Select Operator</option>');

                    $.each(Operators, function (i, Operator) {
                        $("#Operator").append('<option value="' + Operator.Value + '">' + Operator.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve Operators.');//+ ex);
                }
            });
        });

        $('#FromDate').datepicker()
          //.attr('readonly', 'readonly')
          .keypress(function (event) {
              if (event.keyCode == 8) {
                  event.preventDefault();
              }
          });

        $('#FromDate').change(function () {
            if (!moment($('#FromDate').val(), 'MM/DD/YYYY', true).isValid()) {
                $('#FromDate').val('');
            }
        });
        $('#ToDate').datepicker({ maxDate: 0 })
          //.attr('readonly', 'readonly')
          .keypress(function (event) {
              if (event.keyCode == 8) {
                  event.preventDefault();
              }
          });

        $('#ToDate').change(function () {
            if (!moment($('#ToDate').val(), 'MM/DD/YYYY', true).isValid()) {
                $('#ToDate').val('');
            }
        });
    });
    @*$(document).ready(function () {
        $('#Country').change(function () {
            $.ajax({
                type: "post",
                url: '@Url.Action("GetOperatorList")',
                data: { Country: $('#Country').val() },
                datatype: "json",
                success: function (Operators) {
                    $('#Operator').empty();
                    $("#Operator").append('<option value="">Select Operator</option>');

                    $.each(Operators, function (i, Operator) {
                        $("#Operator").append('<option value="' + Operator.Value + '">' + Operator.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve Operators.');//+ ex);
                }
            });
        });
    });*@

</script>